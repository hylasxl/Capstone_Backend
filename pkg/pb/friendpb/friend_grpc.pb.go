// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.0
// source: api/proto/friend.proto

package friendpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	FriendService_GetAccountListFriend_FullMethodName       = "/friend.FriendService/GetAccountListFriend"
	FriendService_SendFriendList_FullMethodName             = "/friend.FriendService/SendFriendList"
	FriendService_ResolveFriendRequestAction_FullMethodName = "/friend.FriendService/ResolveFriendRequestAction"
	FriendService_RecallFriendRequest_FullMethodName        = "/friend.FriendService/RecallFriendRequest"
	FriendService_FollowFriend_FullMethodName               = "/friend.FriendService/FollowFriend"
	FriendService_BlockFriend_FullMethodName                = "/friend.FriendService/BlockFriend"
)

// FriendServiceClient is the client API for FriendService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FriendServiceClient interface {
	GetAccountListFriend(ctx context.Context, in *GetFriendListRequest, opts ...grpc.CallOption) (*GetFriendListResponse, error)
	SendFriendList(ctx context.Context, in *SendFriendListRequest, opts ...grpc.CallOption) (*SendFriendListResponse, error)
	ResolveFriendRequestAction(ctx context.Context, in *FriendRequestActionRequest, opts ...grpc.CallOption) (*FriendRequestActionResponse, error)
	RecallFriendRequest(ctx context.Context, in *FriendRequestRecallRequest, opts ...grpc.CallOption) (*FriendRequestRecallResponse, error)
	FollowFriend(ctx context.Context, in *FriendFollowRequest, opts ...grpc.CallOption) (*FriendFollowResponse, error)
	BlockFriend(ctx context.Context, in *FriendBlockRequest, opts ...grpc.CallOption) (*FriendBlockResponse, error)
}

type friendServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFriendServiceClient(cc grpc.ClientConnInterface) FriendServiceClient {
	return &friendServiceClient{cc}
}

func (c *friendServiceClient) GetAccountListFriend(ctx context.Context, in *GetFriendListRequest, opts ...grpc.CallOption) (*GetFriendListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetFriendListResponse)
	err := c.cc.Invoke(ctx, FriendService_GetAccountListFriend_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *friendServiceClient) SendFriendList(ctx context.Context, in *SendFriendListRequest, opts ...grpc.CallOption) (*SendFriendListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SendFriendListResponse)
	err := c.cc.Invoke(ctx, FriendService_SendFriendList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *friendServiceClient) ResolveFriendRequestAction(ctx context.Context, in *FriendRequestActionRequest, opts ...grpc.CallOption) (*FriendRequestActionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FriendRequestActionResponse)
	err := c.cc.Invoke(ctx, FriendService_ResolveFriendRequestAction_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *friendServiceClient) RecallFriendRequest(ctx context.Context, in *FriendRequestRecallRequest, opts ...grpc.CallOption) (*FriendRequestRecallResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FriendRequestRecallResponse)
	err := c.cc.Invoke(ctx, FriendService_RecallFriendRequest_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *friendServiceClient) FollowFriend(ctx context.Context, in *FriendFollowRequest, opts ...grpc.CallOption) (*FriendFollowResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FriendFollowResponse)
	err := c.cc.Invoke(ctx, FriendService_FollowFriend_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *friendServiceClient) BlockFriend(ctx context.Context, in *FriendBlockRequest, opts ...grpc.CallOption) (*FriendBlockResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FriendBlockResponse)
	err := c.cc.Invoke(ctx, FriendService_BlockFriend_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FriendServiceServer is the server API for FriendService service.
// All implementations must embed UnimplementedFriendServiceServer
// for forward compatibility.
type FriendServiceServer interface {
	GetAccountListFriend(context.Context, *GetFriendListRequest) (*GetFriendListResponse, error)
	SendFriendList(context.Context, *SendFriendListRequest) (*SendFriendListResponse, error)
	ResolveFriendRequestAction(context.Context, *FriendRequestActionRequest) (*FriendRequestActionResponse, error)
	RecallFriendRequest(context.Context, *FriendRequestRecallRequest) (*FriendRequestRecallResponse, error)
	FollowFriend(context.Context, *FriendFollowRequest) (*FriendFollowResponse, error)
	BlockFriend(context.Context, *FriendBlockRequest) (*FriendBlockResponse, error)
	mustEmbedUnimplementedFriendServiceServer()
}

// UnimplementedFriendServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedFriendServiceServer struct{}

func (UnimplementedFriendServiceServer) GetAccountListFriend(context.Context, *GetFriendListRequest) (*GetFriendListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccountListFriend not implemented")
}
func (UnimplementedFriendServiceServer) SendFriendList(context.Context, *SendFriendListRequest) (*SendFriendListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendFriendList not implemented")
}
func (UnimplementedFriendServiceServer) ResolveFriendRequestAction(context.Context, *FriendRequestActionRequest) (*FriendRequestActionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResolveFriendRequestAction not implemented")
}
func (UnimplementedFriendServiceServer) RecallFriendRequest(context.Context, *FriendRequestRecallRequest) (*FriendRequestRecallResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecallFriendRequest not implemented")
}
func (UnimplementedFriendServiceServer) FollowFriend(context.Context, *FriendFollowRequest) (*FriendFollowResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FollowFriend not implemented")
}
func (UnimplementedFriendServiceServer) BlockFriend(context.Context, *FriendBlockRequest) (*FriendBlockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BlockFriend not implemented")
}
func (UnimplementedFriendServiceServer) mustEmbedUnimplementedFriendServiceServer() {}
func (UnimplementedFriendServiceServer) testEmbeddedByValue()                       {}

// UnsafeFriendServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FriendServiceServer will
// result in compilation errors.
type UnsafeFriendServiceServer interface {
	mustEmbedUnimplementedFriendServiceServer()
}

func RegisterFriendServiceServer(s grpc.ServiceRegistrar, srv FriendServiceServer) {
	// If the following call pancis, it indicates UnimplementedFriendServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&FriendService_ServiceDesc, srv)
}

func _FriendService_GetAccountListFriend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFriendListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FriendServiceServer).GetAccountListFriend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FriendService_GetAccountListFriend_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FriendServiceServer).GetAccountListFriend(ctx, req.(*GetFriendListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FriendService_SendFriendList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendFriendListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FriendServiceServer).SendFriendList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FriendService_SendFriendList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FriendServiceServer).SendFriendList(ctx, req.(*SendFriendListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FriendService_ResolveFriendRequestAction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FriendRequestActionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FriendServiceServer).ResolveFriendRequestAction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FriendService_ResolveFriendRequestAction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FriendServiceServer).ResolveFriendRequestAction(ctx, req.(*FriendRequestActionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FriendService_RecallFriendRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FriendRequestRecallRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FriendServiceServer).RecallFriendRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FriendService_RecallFriendRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FriendServiceServer).RecallFriendRequest(ctx, req.(*FriendRequestRecallRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FriendService_FollowFriend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FriendFollowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FriendServiceServer).FollowFriend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FriendService_FollowFriend_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FriendServiceServer).FollowFriend(ctx, req.(*FriendFollowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FriendService_BlockFriend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FriendBlockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FriendServiceServer).BlockFriend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FriendService_BlockFriend_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FriendServiceServer).BlockFriend(ctx, req.(*FriendBlockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FriendService_ServiceDesc is the grpc.ServiceDesc for FriendService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FriendService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "friend.FriendService",
	HandlerType: (*FriendServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAccountListFriend",
			Handler:    _FriendService_GetAccountListFriend_Handler,
		},
		{
			MethodName: "SendFriendList",
			Handler:    _FriendService_SendFriendList_Handler,
		},
		{
			MethodName: "ResolveFriendRequestAction",
			Handler:    _FriendService_ResolveFriendRequestAction_Handler,
		},
		{
			MethodName: "RecallFriendRequest",
			Handler:    _FriendService_RecallFriendRequest_Handler,
		},
		{
			MethodName: "FollowFriend",
			Handler:    _FriendService_FollowFriend_Handler,
		},
		{
			MethodName: "BlockFriend",
			Handler:    _FriendService_BlockFriend_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/proto/friend.proto",
}
